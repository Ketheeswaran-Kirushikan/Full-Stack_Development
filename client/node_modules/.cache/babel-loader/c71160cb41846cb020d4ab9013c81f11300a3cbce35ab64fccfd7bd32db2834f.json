{"ast":null,"code":"var _jsxFileName = \"/home/uki-student/Desktop/react-project-one/src/components/colorPallate/ColorPallate.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ColorPallate.css';\nimport Button from '../Button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorPallate = () => {\n  _s();\n  // Define an array of color values\n  const colorArray = ['red', 'blue', 'green'];\n\n  // Initialize color state with the first color in the array\n  const [color, setColor] = useState(colorArray[0]);\n\n  // Function to change the color based on the button color\n  const changeColor = buttonColor => {\n    // Find the index of the button color in the array\n    const colorIndex = colorArray.indexOf(buttonColor);\n    // Set the color state based on the button color\n    if (colorIndex !== -1) {\n      setColor(colorArray[colorIndex]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"formWork\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todo-List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: color,\n          height: '50px',\n          width: '50px',\n          border: '1px solid black'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), colorArray.map((buttonColor, index) => /*#__PURE__*/_jsxDEV(Button, {\n      name: buttonColor,\n      className: \"calculateButton\",\n      onClick: () => changeColor(buttonColor)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(ColorPallate, \"6pom+EG4HsQBB3Cz8R0ozKndkJo=\");\n_c = ColorPallate;\nexport default ColorPallate;\nvar _c;\n$RefreshReg$(_c, \"ColorPallate\");","map":{"version":3,"names":["React","useState","Button","jsxDEV","_jsxDEV","ColorPallate","_s","colorArray","color","setColor","changeColor","buttonColor","colorIndex","indexOf","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","height","width","border","map","index","name","onClick","_c","$RefreshReg$"],"sources":["/home/uki-student/Desktop/react-project-one/src/components/colorPallate/ColorPallate.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ColorPallate.css';\nimport Button from '../Button/Button';\n\nconst ColorPallate = () => {\n    // Define an array of color values\n    const colorArray = ['red', 'blue', 'green'];\n\n    // Initialize color state with the first color in the array\n    const [color, setColor] = useState(colorArray[0]);\n\n    // Function to change the color based on the button color\n    const changeColor = (buttonColor) => {\n        // Find the index of the button color in the array\n        const colorIndex = colorArray.indexOf(buttonColor);\n        // Set the color state based on the button color\n        if (colorIndex !== -1) {\n            setColor(colorArray[colorIndex]);\n        }\n    };\n\n    return (\n        <div className='formWork'>\n            <h1>Todo-List</h1>\n            <span>\n                {/* Apply inline style to the colored square */}\n                <div style={{ backgroundColor: color, height: '50px', width: '50px', border: '1px solid black' }}></div>\n            </span>\n            {/* Map over the color array and create a button for each color */}\n            {colorArray.map((buttonColor, index) => (\n                <Button key={index} name={buttonColor} className=\"calculateButton\" onClick={() => changeColor(buttonColor)} />\n            ))}\n        </div>\n    );\n};\n\nexport default ColorPallate;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,oBAAoB;AAC3B,OAAOC,MAAM,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB;EACA,MAAMC,UAAU,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC;;EAE3C;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACM,UAAU,CAAC,CAAC,CAAC,CAAC;;EAEjD;EACA,MAAMG,WAAW,GAAIC,WAAW,IAAK;IACjC;IACA,MAAMC,UAAU,GAAGL,UAAU,CAACM,OAAO,CAACF,WAAW,CAAC;IAClD;IACA,IAAIC,UAAU,KAAK,CAAC,CAAC,EAAE;MACnBH,QAAQ,CAACF,UAAU,CAACK,UAAU,CAAC,CAAC;IACpC;EACJ,CAAC;EAED,oBACIR,OAAA;IAAKU,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACrBX,OAAA;MAAAW,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBf,OAAA;MAAAW,QAAA,eAEIX,OAAA;QAAKgB,KAAK,EAAE;UAAEC,eAAe,EAAEb,KAAK;UAAEc,MAAM,EAAE,MAAM;UAAEC,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAkB;MAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtG,CAAC,EAENZ,UAAU,CAACkB,GAAG,CAAC,CAACd,WAAW,EAAEe,KAAK,kBAC/BtB,OAAA,CAACF,MAAM;MAAayB,IAAI,EAAEhB,WAAY;MAACG,SAAS,EAAC,iBAAiB;MAACc,OAAO,EAAEA,CAAA,KAAMlB,WAAW,CAACC,WAAW;IAAE,GAA9Fe,KAAK;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA2F,CAChH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACb,EAAA,CA9BID,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAgClB,eAAeA,YAAY;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}